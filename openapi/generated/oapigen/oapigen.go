// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusFailed ActionStatus = "failed"

	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeRunePoolDeposit ActionType = "runePoolDeposit"

	ActionTypeRunePoolWithdraw ActionType = "runePoolWithdraw"

	ActionTypeSend ActionType = "send"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeThorname ActionType = "thorname"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending, failed to be processed.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending, failed to be processed.
type ActionStatus string

// Type of action
type ActionType string

// action query metadata
type ActionMeta struct {
	// Int64, The last action event_id that can be used for pagination.
	// This token is needed to be given for next page.
	NextPageToken string `json:"nextPageToken"`

	// Int64, The first action event_id that can be used for previous pagination.
	// This token is needed to be given for previous page.
	PrevPageToken string `json:"prevPageToken"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Affiliate fee address of the addLiquidity
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the addLiquidity action
	Memo string `json:"memo"`
}

// AffiliateHistory defines model for AffiliateHistory.
type AffiliateHistory struct {
	Intervals AffiliateHistoryIntervals `json:"intervals"`
	Meta      AffiliateHistoryMeta      `json:"meta"`
}

// AffiliateHistoryIntervals defines model for AffiliateHistoryIntervals.
type AffiliateHistoryIntervals []AffiliateHistoryItem

// AffiliateHistoryItem defines model for AffiliateHistoryItem.
type AffiliateHistoryItem struct {
	// Int64, The count of affiliates during the time interval
	Count string `json:"count"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string         `json:"startTime"`
	Thornames []ItemThorname `json:"thornames"`

	// Int64(e8), The total volume of the affiliates detonated in RUNE
	Volume string `json:"volume"`

	// Int64(e2), The total volume of the affiliates
	// denoted in USD price of the rune in each swap
	VolumeUSD string `json:"volumeUSD"`
}

// AffiliateHistoryMeta defines model for AffiliateHistoryMeta.
type AffiliateHistoryMeta struct {
	// Int64, The count of affiliates during the time interval
	Count string `json:"count"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), The total volume of the affiliates detonated in RUNE
	Volume string `json:"volume"`

	// Int64(e2), The total volume of the affiliates
	// denoted in USD price of the rune in each swap
	VolumeUSD string `json:"volumeUSD"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetadata defines model for BondMetadata.
type BondMetadata struct {
	// node operator fee
	Fee *string `json:"fee,omitempty"`

	// Transaction memo of bond event
	Memo string `json:"memo"`

	// node address
	NodeAddress string `json:"nodeAddress"`

	// bond provider address
	Provider *string `json:"provider,omitempty"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Highest effective bond for nodes
	BondHardCap string `json:"bondHardCap"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minimum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minimum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BonderDetails defines model for BonderDetails.
type BonderDetails struct {
	// Bonder address
	Address string       `json:"address"`
	Nodes   []BonderNode `json:"nodes"`

	// Int64(e8), total amount of RUNE bonded from the bonder
	TotalBonded string `json:"totalBonded"`
}

// BonderNode defines model for BonderNode.
type BonderNode struct {
	// Bonded node address
	Address string `json:"address"`

	// Int64(e8), amount of RUNE bonded to the node
	Bond string `json:"bond"`

	// status of the node
	Status string `json:"status"`
}

// BorrowerDetails defines model for BorrowerDetails.
type BorrowerDetails struct {
	// List details of all the loans identified with the given address
	Pools []BorrowerPool `json:"pools"`
}

// BorrowerPool defines model for BorrowerPool.
type BorrowerPool struct {
	// The asset that the borrower used as collateral
	CollateralAsset string `json:"collateral_asset"`

	// Int64(e8), The total amount of collateral that user deposited
	CollateralDeposited string `json:"collateral_deposited"`

	// Int64(e8), The total amount of collateral the system paid back to the user
	CollateralWithdrawn string `json:"collateral_withdrawn"`

	// Int64(e8), The total amount of debt issued as debt for user. denominated in TOR.
	DebtIssuedTor string `json:"debt_issued_tor"`

	// Int64(e8), The total amount of debt that the user paid back. denominated in TOR.
	DebtRepaidTor string `json:"debt_repaid_tor"`

	// Int64, Unix timestamp for the last time borrower opened a loan
	LastOpenLoanTimestamp string `json:"last_open_loan_timestamp"`

	// Int64, Unix timestamp for the last time borrower repayment occurred
	LastRepayLoanTimestamp string   `json:"last_repay_loan_timestamp"`
	TargetAssets           []string `json:"target_assets"`
}

// Borrowers defines model for Borrowers.
type Borrowers []string

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {
	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// ContractMetadata defines model for ContractMetadata.
type ContractMetadata struct {
	// contract attributes emitted from its event
	Attributes map[string]interface{} `json:"attributes"`

	// contract type defined by cosmwasm
	ContractType string `json:"contractType"`

	// contract funds emitted from its event
	Funds *string `json:"funds,omitempty"`

	// contract massages emitted from its event
	Msg *map[string]interface{} `json:"msg,omitempty"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64, Number of liquidity members in the pool at the end of the interval
	MembersCount string `json:"membersCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryItemPool defines model for DepthHistoryItemPool.
type DepthHistoryItemPool struct {
	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8) in rune, the total value in the pool (both assets and rune) at the end of the interval.
	// Note: this is twice of the pool's Rune depth. (as pools are symmetrically balance)
	TotalDepth string `json:"totalDepth"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64, Number of liquidity members in the pool at the end of the interval at time endTime
	EndMemberCount string `json:"endMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64, Number of liquidity member in the pool at the start of the interval at time startTime
	StartMemberCount string `json:"startMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total saver reward collected by the pool, shown in pool's ASSET
	SaverEarning string `json:"saverEarning"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// FailedMetadata defines model for FailedMetadata.
type FailedMetadata struct {
	// failed transaction code
	Code string `json:"code"`

	// failed transaction memo
	Memo string `json:"memo"`

	// failed transaction code
	Reason string `json:"reason"`
}

// GenesisInf defines model for GenesisInf.
type GenesisInf struct {
	// Genesis Block hash
	Hash string `json:"hash"`

	// Genesis Block height
	Height int `json:"height"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database    bool        `json:"database"`
	GenesisInfo *GenesisInf `json:"genesisInfo,omitempty"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// ItemThorname defines model for ItemThorname.
type ItemThorname struct {
	// Int64, The count of affiliates with the same thorname during the time interval
	Count string `json:"count"`

	// thorname of the affiliate
	Thorname string `json:"thorname"`

	// Int64(e8), The volume of affiliates with the same thorname detonated in RUNE
	Volume string `json:"volume"`

	// Int64(e2), The volume of affiliates with the same thorname
	// denoted in USD price of the rune in each swap
	VolumeUSD string `json:"volumeUSD"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset that is currently deposited to the pool by member.
	// This field is same as the `asset_deposit_value` field in thornode. Mainly can be used
	// for tracking, mainly Growth Percentage
	AssetDeposit string `json:"assetDeposit"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total Rune that is currently deposited to the pool by member.
	// This field is same as the `rune_deposit_value` field in thornode. Mainly can be used
	// for tracking, mainly Growth Percentage
	RuneDeposit string `json:"runeDeposit"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity     *AddLiquidityMetadata     `json:"addLiquidity,omitempty"`
	Bond             *BondMetadata             `json:"bond,omitempty"`
	Contract         *ContractMetadata         `json:"contract,omitempty"`
	Failed           *FailedMetadata           `json:"failed,omitempty"`
	Refund           *RefundMetadata           `json:"refund,omitempty"`
	RunePoolDeposit  *RunePoolDepositMetadata  `json:"runePoolDeposit,omitempty"`
	RunePoolWithdraw *RunePoolWithdrawMetadata `json:"runePoolWithdraw,omitempty"`
	Send             *SendMetadata             `json:"send,omitempty"`
	Swap             *SwapMetadata             `json:"swap,omitempty"`
	Tcy              *TcyMetadata              `json:"tcy,omitempty"`
	Thorname         *ThornameMetadata         `json:"thorname,omitempty"`
	Withdraw         *WithdrawMetadata         `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	// Float, Annual Percentage Yield of earning to depth (earning/depth) estimated from a period
	// (configurable by the period parameter, default is 14) E.g. 0.1 means 10% yearly return.
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64(e8), The earning that has been recorded from the pool asset's Liquidity Fees
	// and Rewards in RUNE. The earnings shown are from the period parameter default being 14 days
	// (configurable by the period parameter).
	Earnings string `json:"earnings"`

	// Float, The estimation of earnings during the time interval expanded through a year
	// compared to the current pool depth.
	// E.g. 0.1 means the pool based on this interval earnings can earn 10% of its pool during a year.
	EarningsAnnualAsPercentOfDepth string `json:"earningsAnnualAsPercentOfDepth"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Annual yield estimated (compounding) from a period (default being 14d)
	// configurable by the period parameter. Calculated from Liquidity Unit Value Index (LUVI).
	// Due to Impermanent Loss and Synths Leverage this might be negative.
	LpLuvi string `json:"lpLuvi"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, Annual Percentage Yield of earning to depth (earning/depth) estimated from a period
	// (configurable by the period parameter, default is 14) E.g. 0.1 means 10% yearly return.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, Annual Return estimated linearly (not compounded) for savers from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 14). E.g. 0.1 means 10% yearly return.
	// If the savers period has not yet been reached, It will show zero instead.
	SaversAPR string `json:"saversAPR"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// Float, the proportion of overall yield that is given to savers based on its size
	// (relative to dual side LPs) and the SynthYieldBasisPoints. E.g. 0.1 means 10% of the yield
	// goes to the savers.
	SaversYieldShare *string `json:"saversYieldShare,omitempty"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total collateral of the pool created by the borrowers.
	TotalCollateral string `json:"totalCollateral"`

	// Int64, Total debt of the pool by the borrowers.
	TotalDebtTor string `json:"totalDebtTor"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// deprecated now it's only showing zero util being deleted.
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), The earning that has been recorded from the pool asset's Liquidity Fees
	// and Rewards in RUNE. The earnings shown are from the period parameter default being 14 days
	// (configurable by the period parameter).
	Earnings string `json:"earnings"`

	// Float, The estimation of earnings during the time interval expanded through a year
	// compared to the current pool depth.
	// E.g. 0.1 means the pool based on this interval earnings can earn 10% of its pool during a year.
	EarningsAnnualAsPercentOfDepth string `json:"earningsAnnualAsPercentOfDepth"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// deprecated now it's only showing zero util being deleted.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Float, Annual Return estimated linearly (not compounded) for savers from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 14). E.g. 0.1 means 10% yearly return.
	// If the savers period has not yet been reached, It will show zero instead.
	SaversAPR string `json:"saversAPR"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// List details of all the RUNEPools identified with the given addresses
type RUNEPoolDetails []RUNEPoolProvider

// RUNEPoolHistory defines model for RUNEPoolHistory.
type RUNEPoolHistory struct {
	Intervals RUNEPoolHistoryIntervals `json:"intervals"`
	Meta      RUNEPoolHistoryMeta      `json:"meta"`
}

// RUNEPoolHistoryIntervals defines model for RUNEPoolHistoryIntervals.
type RUNEPoolHistoryIntervals []RUNEPoolHistoryItem

// RUNEPoolHistoryItem defines model for RUNEPoolHistoryItem.
type RUNEPoolHistoryItem struct {
	// Int64, Number of RUNEPool members in the pool at the end of the interval
	Count string `json:"count"`

	// Int64(e8), The depth in the RUNEPool vault at the end of the interval
	Depth *string `json:"depth,omitempty"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Units in the RUNEPool vault at the end of the interval
	Units string `json:"units"`
}

// RUNEPoolHistoryMeta defines model for RUNEPoolHistoryMeta.
type RUNEPoolHistoryMeta struct {
	// Int64, Number of RUNEPool member in the RUNEPool vault at the end of the interval at time endTime
	EndCount string `json:"endCount"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64,  Units in the RUNEPool vault at the end of the interval at time endTime
	EndUnits string `json:"endUnits"`

	// Int64, Number of RUNEPool member in the RUNEPool vault at the start of the interval at time startTime
	StartCount string `json:"startCount"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64,  Units in the RUNEPool vault at the start of the interval at time startTime
	StartUnits string `json:"startUnits"`
}

// RUNEPoolProvider defines model for RUNEPoolProvider.
type RUNEPoolProvider struct {
	// Int64, Unix timestamp for the first time member deposited into the RUNEPool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the RUNEPool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64(e8), total asset added in the RUNEPool by member
	RuneAdded string `json:"runeAdded"`

	// address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total asset that is currently deposited by the member
	RuneDeposit string `json:"runeDeposit"`

	// Int64(e8), total asset withdrawn from the RUNEPool by the member
	RuneWithdrawn string `json:"runeWithdrawn"`

	// Int64, units that belong the the member
	Units string `json:"units"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`

	// The type of the transaction given from its Memo
	// Type of Transaction type:
	// "unknown", "add", "withdraw", "swap", "limitOrder", "outbound", "donate",
	// "bond", "unbond", "leave", "yggdrasilFund", "yggdrasilReturn", "reserve",
	// "refund", "migrate", "ragnarok", "switch", "noOp", "consolidate", "thorname",
	// "loanOpen", "loanRepayment"
	TxType string `json:"txType"`
}

// ReserveHistory defines model for ReserveHistory.
type ReserveHistory struct {
	Intervals ReserveIntervals `json:"intervals"`
	Meta      ReserveMeta      `json:"meta"`
}

// ReserveIntervals defines model for ReserveIntervals.
type ReserveIntervals []ReserveItem

// ReserveItem defines model for ReserveItem.
type ReserveItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), fee made from outbound
	GasFeeOutbound string `json:"gasFeeOutbound"`

	// Int64(e8), RUNE paid to the pool for compensating the gas fees
	GasReimbursement string `json:"gasReimbursement"`

	// Int64(e8), RUNE paid to the system on deposit, send messages
	NetworkFee string `json:"networkFee"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ReserveMeta defines model for ReserveMeta.
type ReserveMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), fee made from outbound
	GasFeeOutbound string `json:"gasFeeOutbound"`

	// Int64(e8), RUNE paid to the pool for compensating the gas fees
	GasReimbursement string `json:"gasReimbursement"`

	// Int64(e8), RUNE paid to the system on deposit, send messages
	NetworkFee string `json:"networkFee"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// RunePoolDepositMetadata defines model for RunePoolDepositMetadata.
type RunePoolDepositMetadata struct {
	// Int64, amount of units assigned to the member as result of the
	// deposit
	Units string `json:"units"`
}

// RunePoolWithdrawMetadata defines model for RunePoolWithdrawMetadata.
type RunePoolWithdrawMetadata struct {
	// Transaction affiliate address
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64, Transaction affiliate amount in rune
	AffiliateAmount string `json:"affiliateAmount"`

	// Transaction affiliate basis point
	AffiliateBasisPoint string `json:"affiliateBasisPoint"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of units removed from the member as result of the withdrawal
	Units string `json:"units"`
}

// RunePriceHistory defines model for RunePriceHistory.
type RunePriceHistory struct {
	Intervals RunePriceIntervals `json:"intervals"`
	Meta      RunePriceMeta      `json:"meta"`
}

// RunePriceIntervals defines model for RunePriceIntervals.
type RunePriceIntervals []RunePriceItem

// RunePriceItem defines model for RunePriceItem.
type RunePriceItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), The price of Rune based on the USD pools at the the interval
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// RunePriceMeta defines model for RunePriceMeta.
type RunePriceMeta struct {
	// Int64(e8), The price of Rune based on the USD pools at the end of the interval
	EndRunePriceUSD string `json:"endRunePriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), The price of Rune based on the USD pools at the start of the interval
	StartRunePriceUSD string `json:"startRunePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// SaverDetails defines model for SaverDetails.
type SaverDetails struct {
	// List details of all the savers identified with the given address
	Pools []SaverPool `json:"pools"`
}

// SaverPool defines model for SaverPool.
type SaverPool struct {
	// Int64(e8), total asset added in the saver pool by member
	AssetAdded string `json:"assetAdded"`

	// saver address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset that is currently deposited by the member
	AssetDeposit string `json:"assetDeposit"`

	// Int64(e8), total asset can be redeemed from the saver pool by member
	AssetRedeem string `json:"assetRedeem"`

	// Int64(e8), total asset withdrawn from the saver pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the saver pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the saver pool
	DateLastAdded string `json:"dateLastAdded"`

	// The Pool rest of the data are referring to (only those pools can show up which have a corresponding saver pool)
	Pool string `json:"pool"`

	// Int64, saver liquidity units that belong the the member
	SaverUnits string `json:"saverUnits"`
}

// SaversHistory defines model for SaversHistory.
type SaversHistory struct {
	Intervals SaversHistoryIntervals `json:"intervals"`
	Meta      SaversHistoryMeta      `json:"meta"`
}

// SaversHistoryIntervals defines model for SaversHistoryIntervals.
type SaversHistoryIntervals []SaversHistoryItem

// SaversHistoryItem defines model for SaversHistoryItem.
type SaversHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Number of saver members in the pool at the end of the interval
	SaversCount string `json:"saversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval
	SaversDepth string `json:"saversDepth"`

	// Int64, Savers Units in the saver vault at the end of the interval
	SaversUnits string `json:"saversUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// SaversHistoryMeta defines model for SaversHistoryMeta.
type SaversHistoryMeta struct {
	// Int64, Number of savers member in the savers vault at the end of the interval at time endTime
	EndSaversCount string `json:"endSaversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval at time
	// endTime
	EndSaversDepth string `json:"endSaversDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Savers Units in the savers vault at the end of the interval at time endTime
	EndUnits string `json:"endUnits"`

	// Int64, Number of savers member in the savers vault at the start of the interval at time startTime
	StartSaversCount string `json:"startSaversCount"`

	// Int64(e8), The depth in savers vault at the start of the interval at time
	// startTime
	StartSaversDepth string `json:"startSaversDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Savers Units in the savers vault at the start of the interval at time startTime
	StartUnits string `json:"startUnits"`
}

// SendMetadata defines model for SendMetadata.
type SendMetadata struct {
	// failed transaction code
	Code string `json:"code"`

	// Transaction memo of the send action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// failed transaction code
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or bep2 rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// Streaming Metadata associated with the action if it was streaming swap
type StreamingSwapMeta struct {
	// Int64, Number of swaps events which already happened.
	Count string `json:"count"`

	// Represents a digital currency amount
	DepositedCoin Coin `json:"depositedCoin"`

	// Array of failed swaps reasons in streaming swap.
	FailedSwapReasons *[]string `json:"failedSwapReasons,omitempty"`

	// Array of failed swaps index in streaming swap.
	FailedSwaps *[]string `json:"failedSwaps,omitempty"`

	// Represents a digital currency amount
	InCoin Coin `json:"inCoin"`

	// Int64, Number of blocks between swpas. (Blocks/Swap) E.g. 1 means every block.
	Interval string `json:"interval"`

	// Int64, The last blockheight the final swap happened (not outbound). This field will be missing until the final swap happens.
	LastHeight string `json:"lastHeight"`

	// Represents a digital currency amount
	OutCoin Coin `json:"outCoin"`

	// Int64, The estimated output based on the first swap block * quantity.
	// This is the current method quote calculate the estimation.
	OutEstimation string `json:"outEstimation"`

	// Int64,  Number of swaps which thorchain is planning to execute. Total count at the end might be less.
	Quantity string `json:"quantity"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to secured asset.
	// Big swaps have the same weight as small swaps
	FromSecuredAverageSlip string `json:"fromSecuredAverageSlip"`

	// Int64, count of swaps from secured asset to rune
	FromSecuredCount string `json:"fromSecuredCount"`

	// Int64(e8), the fees collected from swaps from rune to secured asset (in rune)
	FromSecuredFees string `json:"fromSecuredFees"`

	// Int64(e8), volume of swaps from rune to secured asset denoted in rune
	FromSecuredVolume string `json:"fromSecuredVolume"`

	// Int64(e2), volume of swaps from secured asset to rune denoted in USD price of the rune in each swap
	FromSecuredVolumeUSD string `json:"fromSecuredVolumeUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to trade asset.
	// Big swaps have the same weight as small swaps
	FromTradeAverageSlip string `json:"fromTradeAverageSlip"`

	// Int64, count of swaps from trade asset to rune
	FromTradeCount string `json:"fromTradeCount"`

	// Int64(e8), the fees collected from swaps from rune to trade asset (in rune)
	FromTradeFees string `json:"fromTradeFees"`

	// Int64(e8), volume of swaps from rune to trade asset denoted in rune
	FromTradeVolume string `json:"fromTradeVolume"`

	// Int64(e2), volume of swaps from trade asset to rune denoted in USD price of the rune in each swap
	FromTradeVolumeUSD string `json:"fromTradeVolumeUSD"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Int64(e2), volume of swaps from rune to synthetic asset denoted in USD price of the rune in each swap
	SynthMintVolumeUSD string `json:"synthMintVolumeUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Int64(e2), volume of swaps from synthetic asset to rune denoted in USD price of the rune in each swap
	SynthRedeemVolumeUSD string `json:"synthRedeemVolumeUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64(e2), volume of swaps from rune to asset denoted in USD price of the rune in each swap
	ToAssetVolumeUSD string `json:"toAssetVolumeUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e2), volume of swaps from asset to rune denoted in USD price of the rune in each swap
	ToRuneVolumeUSD string `json:"toRuneVolumeUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to secured asset.
	// Big swaps have the same weight as small swaps
	ToSecuredAverageSlip string `json:"toSecuredAverageSlip"`

	// Int64, count of swaps from rune to secured asset
	ToSecuredCount string `json:"toSecuredCount"`

	// Int64(e8), the fees collected from swaps from rune to secured asset (in rune)
	ToSecuredFees string `json:"toSecuredFees"`

	// Int64(e8), volume of swaps from secured asset to rune denoted in rune
	ToSecuredVolume string `json:"toSecuredVolume"`

	// Int64(e2), volume of swaps from rune to secured asset denoted in USD price of the rune in each swap
	ToSecuredVolumeUSD string `json:"toSecuredVolumeUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to trade asset.
	// Big swaps have the same weight as small swaps
	ToTradeAverageSlip string `json:"toTradeAverageSlip"`

	// Int64, count of swaps from rune to trade asset
	ToTradeCount string `json:"toTradeCount"`

	// Int64(e8), the fees collected from swaps from rune to trade asset (in rune)
	ToTradeFees string `json:"toTradeFees"`

	// Int64(e8), volume of swaps from trade asset to rune denoted in rune
	ToTradeVolume string `json:"toTradeVolume"`

	// Int64(e2), volume of swaps from rune to trade asset denoted in USD price of the rune in each swap
	ToTradeVolumeUSD string `json:"toTradeVolumeUSD"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`

	// Int64(e2),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in USD price of the rune in each swap)
	TotalVolumeUSD string `json:"totalVolumeUSD"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// in asset price usd at the first interval
	InPriceUSD string `json:"inPriceUSD"`

	// indicate whether this action was streaming
	IsStreamingSwap bool `json:"isStreamingSwap"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// out asset price usd at the first interval
	OutPriceUSD string `json:"outPriceUSD"`

	// Streaming Metadata associated with the action if it was streaming swap
	StreamingSwapMeta *StreamingSwapMeta `json:"streamingSwapMeta,omitempty"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`

	// The type of the transaction given from its Memo.
	// Type of Transaction:
	// "unknown", "add", "withdraw", "swap", "limitOrder", "outbound", "donate",
	// "bond", "unbond", "leave", "yggdrasilFund", "yggdrasilReturn", "reserve",
	// "refund", "migrate", "ragnarok", "switch", "noOp", "consolidate", "thorname",
	// "loanOpen", "loanRepayment"
	TxType string `json:"txType"`
}

// TCYDistribution defines model for TCYDistribution.
type TCYDistribution struct {
	// TCY holder address.
	Address string `json:"address"`

	// Float, annual percentage rate of the TCY distribution.
	Apr string `json:"apr"`

	// List details of all the TCY distributions.
	Distributions []TCYDistributionItem `json:"distributions"`

	// Int64(e8), total amount of RUNE distributed to the TCY holder.
	Total string `json:"total"`
}

// TCYDistributionItem defines model for TCYDistributionItem.
type TCYDistributionItem struct {
	// Int64(e8), amount of RUNE distributed to the TCY holder.
	Amount string `json:"amount"`

	// Int64, Unix timestamp for the TCY distribution.
	Date string `json:"date"`

	// Int64(e8), RUNE price at the time of distribution.
	Price string `json:"price"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime    string                 `json:"endTime"`
	PoolsDepth []DepthHistoryItemPool `json:"poolsDepth"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// TcyMetadata defines model for TcyMetadata.
type TcyMetadata struct {
	// Transaction memo of tcy message.
	Memo string `json:"memo"`
}

// ThornameMetadata defines model for ThornameMetadata.
type ThornameMetadata struct {
	// The CHAIN address thorname has been registered to.
	Address string `json:"address"`

	// The thorname's chain.
	Chain string `json:"chain"`

	// Int64, THORChain block height in which THORName expires.
	Expire string `json:"expire"`

	// Int64, the amount of funding for the THORName registration.
	FundAmount string `json:"fundAmount"`

	// Transaction memo of thorname deposit message.
	Memo string `json:"memo"`

	// owner's THOR address.
	Owner string `json:"owner"`

	// Int64, the registration fee paid.
	RegistrationFee string `json:"registrationFee"`

	// The thorname registered to the address.
	Thorname string `json:"thorname"`

	// The type of the transaction given from its Memo.
	TxType string `json:"txType"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`

	// if transactions flaged as affiliate
	Affiliate *bool `json:"affiliate,omitempty"`
	Coins     Coins `json:"coins"`

	// The thorchain height that the outbound transaction occurred.
	Height *string `json:"height,omitempty"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// VoteItem defines model for VoteItem.
type VoteItem struct {
	// node address that voted in the protocol
	Address string `json:"address"`

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// key amount of the vote
	Key string `json:"key"`
}

// VoteValue defines model for VoteValue.
type VoteValue struct {
	// value of the vote
	Value string     `json:"value"`
	Votes []VoteItem `json:"votes"`
}

// Votes defines model for Votes.
type Votes []VoteValue

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how asymmetrical the withdrawal was. 0 means
	// totally symmetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune paid out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters. It may be -1 if
	// Midgard is having trouble counting the results and has to cancel the count query
	// (temporary fix). Also, if new action parameters is used it won't be returned.
	Count *string `json:"count,omitempty"`

	// action query metadata
	Meta ActionMeta `json:"meta"`
}

// AffiliateHistoryResponse defines model for AffiliateHistoryResponse.
type AffiliateHistoryResponse AffiliateHistory

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// BonderDetailsResponse defines model for BonderDetailsResponse.
type BonderDetailsResponse BonderDetails

// BorrowerDetailsResponse defines model for BorrowerDetailsResponse.
type BorrowerDetailsResponse BorrowerDetails

// BorrowersResponse defines model for BorrowersResponse.
type BorrowersResponse Borrowers

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// List details of all the RUNEPools identified with the given addresses
type RUNEPoolDetailsResponse RUNEPoolDetails

// RUNEPoolHistoryResponse defines model for RUNEPoolHistoryResponse.
type RUNEPoolHistoryResponse RUNEPoolHistory

// ReserveHistoryResponse defines model for ReserveHistoryResponse.
type ReserveHistoryResponse ReserveHistory

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// RunePriceHistoryResponse defines model for RunePriceHistoryResponse.
type RunePriceHistoryResponse RunePriceHistory

// SaverDetailsResponse defines model for SaverDetailsResponse.
type SaverDetailsResponse SaverDetails

// SaversHistoryResponse defines model for SaversHistoryResponse.
type SaversHistoryResponse SaversHistory

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TCYDistributionResponse defines model for TCYDistributionResponse.
type TCYDistributionResponse TCYDistribution

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// VotesResponse defines model for VotesResponse.
type VotesResponse Votes

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Comma separated list. Any asset that is part of the action (CHAIN.SYMBOL)
	// Additionally, synth, nosynth, and norune filters can be used for swap, add/withdraw actions.
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch, thorname, runePoolDeposit, runePoolWithdraw)
	Type *string `json:"type,omitempty"`

	// One or more comma separated transaction type of the action, it's the tx type parsed
	// from memo. For example: Loan is a swap event but it's considered as loan tx type
	// Type of Transactions:
	// "unknown", "add", "withdraw", "swap", "limitOrder", "outbound", "donate",
	// "bond", "unbond", "leave", "yggdrasilFund", "yggdrasilReturn", "reserve",
	// "refund", "migrate", "ragnarok", "switch", "noOp", "consolidate", "thorname",
	// "loanOpen", "loanRepayment"
	TxType *string `json:"txType,omitempty"`

	// Comma separated list. Affiliate address of the action (swap, refund)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`

	// if this is given, the actions for the next page will be given
	NextPageToken *int64 `json:"nextPageToken,omitempty"`

	// if this is given, the actions older than the timestamp will be given
	Timestamp *int64 `json:"timestamp,omitempty"`

	// if this is given, the actions older than the height will be given
	Height *int64 `json:"height,omitempty"`

	// if this is given, the actions for the previous page will be given
	PrevPageToken *int64 `json:"prevPageToken,omitempty"`

	// if this is given, the actions newer than the timestamp will be given
	FromTimestamp *int64 `json:"fromTimestamp,omitempty"`

	// if this is given, the actions newer than the height will be given
	FromHeight *int64 `json:"fromHeight,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {
	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetBorrowersAddressesParams defines parameters for GetBorrowersAddresses.
type GetBorrowersAddressesParams struct {
	// Return only borrowers getting loan against this asset as collateral.
	Asset *string `json:"asset,omitempty"`
}

// GetAffiliateHistoryParams defines parameters for GetAffiliateHistory.
type GetAffiliateHistoryParams struct {
	// Return history given thorname. Returns sum of all thornames if missing.
	Thorname *string `json:"thorname,omitempty"`

	// Interval of calculations
	Interval *GetAffiliateHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetAffiliateHistoryParamsInterval defines parameters for GetAffiliateHistory.
type GetAffiliateHistoryParamsInterval string

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetReserveHistoryParams defines parameters for GetReserveHistory.
type GetReserveHistoryParams struct {
	// Interval of calculations
	Interval *GetReserveHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetReserveHistoryParamsInterval defines parameters for GetReserveHistory.
type GetReserveHistoryParamsInterval string

// GetRunePriceHistoryParams defines parameters for GetRunePriceHistory.
type GetRunePriceHistoryParams struct {
	// Interval of calculations
	Interval *GetRunePriceHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetRunePriceHistoryParamsInterval defines parameters for GetRunePriceHistory.
type GetRunePriceHistoryParamsInterval string

// GetRUNEPoolHistoryParams defines parameters for GetRUNEPoolHistory.
type GetRUNEPoolHistoryParams struct {
	// Interval of calculations
	Interval *GetRUNEPoolHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetRUNEPoolHistoryParamsInterval defines parameters for GetRUNEPoolHistory.
type GetRUNEPoolHistoryParamsInterval string

// GetSaversHistoryParams defines parameters for GetSaversHistory.
type GetSaversHistoryParams struct {
	// Interval of calculations
	Interval *GetSaversHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSaversHistoryParamsInterval defines parameters for GetSaversHistory.
type GetSaversHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMemberDetailParams defines parameters for GetMemberDetail.
type GetMemberDetailParams struct {
	// A flag to show saver vault membership details, the default is false.
	ShowSavers *bool `json:"showSavers,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {
	// Specifies the base interval from which APY is extrapolated.
	// Default is 14d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 14d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 14d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// GetVotesParams defines parameters for GetVotes.
type GetVotesParams struct {
	// Specifies the base interval from which votes will be shown.
	// Default is 90d.
	Period *GetVotesParamsPeriod `json:"period,omitempty"`
}

// GetVotesParamsPeriod defines parameters for GetVotes.
type GetVotesParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"jzmXPOIJ+pFLPdXvv//vAAAA//9VZn/9CK4BAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
